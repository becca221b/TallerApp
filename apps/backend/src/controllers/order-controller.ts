import { Request, Response } from 'express';
import { OrderRepository } from '../repositories/OrderRepository';
import { Order, OrderStatus } from '@/domain/entities/Order';
import { OrderDetail } from '@/domain/entities/OrderDetail';

export class OrderController {
    constructor(
        private readonly orderRepository: OrderRepository
    ) {}

    async createOrder(req: Request, res: Response): Promise<void> {
        try {
            const { customerId, employeeId, deliveryDate, garments } = req.body;

            // Validate required fields
            if (!customerId || !employeeId || !deliveryDate || !garments || !Array.isArray(garments)) {
                res.status(400).json({ 
                    error: 'Missing required fields. Required: customerId, employeeId, deliveryDate, garments (array)' 
                });
                return;
            }

            // Validate garments array
            if (garments.length === 0) {
                res.status(400).json({ 
                    error: 'Order must contain at least one garment' 
                });
                return;
            }

            // Create order
            const order = await this.orderRepository.saveOrder({
                id: '', // Will be generated by repository
                customerId,
                employeeId,
                deliveryDate: new Date(deliveryDate),
                orderDate: new Date(),
                status: OrderStatus.Pending,
                orderDetails: garments.map(garment => ({
                    id: '', // Will be generated by repository
                    garmentId: garment.garmentId,
                    quantity: garment.quantity,
                    price: garment.price,
                    subtotal: garment.price * garment.quantity,
                    size: garment.size,
                    sex: garment.sex
                }) as OrderDetail),
                totalPrice: garments.reduce((sum, g) => sum + (g.price * g.quantity), 0)
            });

            res.status(201).json(order);
        } catch (error) {
            console.error('Error creating order:', error);
            if (error instanceof Error) {
                res.status(400).json({ error: error.message });
            } else {
                res.status(500).json({ error: 'Internal server error while creating order' });
            }
        }
    }

    async assignOrder(req: Request, res: Response): Promise<void> {
        try {
            const { orderId, employeeId } = req.body;

            // Validate required fields
            if (!orderId || !employeeId) {
                res.status(400).json({ 
                    error: 'Missing required fields. Required: orderId, employeeId' 
                });
                return;
            }

            // Verify order exists and update it
            const updatedOrder = await this.orderRepository.updateOrder(orderId, {
                employeeId,
                status: OrderStatus.InProcess
            });

            if (!updatedOrder) {
                res.status(404).json({ error: 'Order not found' });
                return;
            }

            res.status(200).json(updatedOrder);
        } catch (error) {
            console.error('Error assigning order:', error);
            if (error instanceof Error) {
                res.status(400).json({ error: error.message });
            } else {
                res.status(500).json({ error: 'Internal server error while assigning order' });
            }
        }
    }

    async getOrder(req: Request, res: Response): Promise<void> {
        try {
            const orderId = req.params.id;
            if (!orderId) {
                res.status(400).json({ error: 'Order ID is required' });
                return;
            }

            const order = await this.orderRepository.findOrderById(orderId);
            if (!order) {
                res.status(404).json({ error: 'Order not found' });
                return;
            }

            res.status(200).json(order);
        } catch (error) {
            console.error('Error getting order:', error);
            res.status(500).json({ error: 'Internal server error while fetching order' });
        }
    }

    async getOrdersByCustomer(req: Request, res: Response): Promise<void> {
        try {
            const customerId = req.params.customerId;
            if (!customerId) {
                res.status(400).json({ error: 'Customer ID is required' });
                return;
            }

            const orders = await this.orderRepository.findOrdersByCustomerId(customerId);
            res.status(200).json(orders);
        } catch (error) {
            console.error('Error getting customer orders:', error);
            res.status(500).json({ error: 'Internal server error while fetching customer orders' });
        }
    }

    async getOrdersByEmployee(req: Request, res: Response): Promise<void> {
        try {
            const employeeId = req.params.employeeId;
            if (!employeeId) {
                res.status(400).json({ error: 'Employee ID is required' });
                return;
            }

            const orders = await this.orderRepository.findOrdersByEmployeeId(employeeId);
            res.status(200).json(orders);
        } catch (error) {
            console.error('Error getting employee orders:', error);
            res.status(500).json({ error: 'Internal server error while fetching employee orders' });
        }
    }
}

// Factory function to create the controller with the repository
export const createOrderController = (orderRepository: OrderRepository): OrderController => {
    return new OrderController(orderRepository);
};

     
